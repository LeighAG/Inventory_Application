/*package lag311.pa;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextArea;

import java.net.URL;
import java.util.ResourceBundle;
public class AddPartController implements Initializable{
    public RadioButton radioAddPartInHouse;
    public RadioButton radioAddPartOutsourced;
    public Label lblAddPartID;
    public TextArea txtAddPartID;
    public Label lblAddPartName;
    public TextArea txtAddPartName;
    public Label lblAddPartInv;
    public TextArea txtAddPartInv;
    public Label lblAddPartPrice;
    public TextArea txtAddPartPrice;
    public Label lblAddPartMax;
    public TextArea txtAddPartMax;
    public Label lblAddPartMin;
    public TextArea txtAddPartMin;
    public Label lblAddPartMachineID;
    public TextArea txtAddPartMachineID;
    public Button btnAddPartSave;
    public Button btnAddPartCancel;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {

    }
}
*/

package lag311.pa;

import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.text.DecimalFormat;
import java.util.ResourceBundle;

/**A class that controls class the AddPart GUI.
 * This class allows the user to save a new instance of Part or cancel and return to the Main GUI.
 * FUTURE ENHANCEMENTS: Presently, the unique ID is generated by adding 1 to the highest existing ID integer. However, with Parts being deleted,
 * it would be beneficial to instead have a method that assigns a unique ID number based on the absence of that ID existing in the Parts observable list.
 * @author Leigh Grover*/
public class AddPartController {
    private static final DecimalFormat decimalFormat = new DecimalFormat("0.00");
    Stage stage;
    Parent scene;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private ToggleGroup inHouse;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private Button btnAddPartCancel;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private Button btnAddPartSave;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private Label lblAddPartID;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private Label lblAddPartInv;

    /**
     * An element in the AddPart GUI
     */
    @FXML
    private Label lblAddPartMachine_or_CoName;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private Label lblAddPartMax;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private Label lblAddPartMin;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private Label lblAddPartName;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private Label lblAddPartPrice;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private Label lblAddPartTitle;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private RadioButton radioAddPartInHouse;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private RadioButton radioAddPartOutsourced;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private TextField txtAddPartID;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private TextField txtAddPartInv;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private TextField txtAddPartMachine_or_CoName;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private TextField txtAddPartMax;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private TextField txtAddPartMin;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private TextField txtAddPartName;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private TextField txtAddPartPrice;
    /**
     * An element in the AddPart GUI
     */
    @FXML
    private Label exceptionErrorText;

    /**
     * An action event method to select "In House" option for the Part instance.
     * This action event changes the label text to read: Machine ID.
     *
     * @param event The action event of button click
     */
    @FXML
    void onClickInHouse(ActionEvent event) {
        lblAddPartMachine_or_CoName.setText("Machine ID");
    }

    /**
     * An action event method to select the "Outsourced" option for the Part instance.
     * This action event changes the label text to read: Company Name.
     *
     * @param event The action event of button click
     */
    @FXML
    void onClickOutsourced(ActionEvent event) {
        lblAddPartMachine_or_CoName.setText("Company Name");
    }

    /**
     * A action event method to cancel and exit the AddPart GUI.
     * This action event navigates the user back to the main menu with no saved data from AddPart.
     *
     * @param event The action event of button click.
     */
    @FXML
    void onActionCancelPart(ActionEvent event) throws IOException {
        Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        scene = FXMLLoader.load(getClass().getResource("/lag311/pa/main.fxml"));
        stage.setScene(new Scene(scene));
        stage.show();
    }

    /**
     * A method to create a unique ID.
     * This method calculates a unique ID based on size of the observable parts list and adds 1 to create the next ID.
     *
     * @return integer ID
     * LOGIC ERROR: Initially, I had created and assigned unique ID's by identifying the size of the observable list of allParts,
     * and then adding 1 to the size, which would become the ID. However, I found that this would assign duplicate ID's after deleting from
     * the observable list.  I corrected this by instead identifying the highest ID number, and then adding 1 to that number.
     */
    public int incrementID() {
        int partIdCounter = 0;
        ObservableList<Part> partsList = Inventory.getAllParts();
        for (Part part : partsList) {
            partIdCounter = part.getId();
            for (Part part_search : partsList) {
                if (partIdCounter < part_search.getId()) {
                    partIdCounter = part_search.getId();
                }
            }
        }
        return ++partIdCounter;
    };


    /**
     * An action event method that creates a new Part instance and then loads the Main GUI.
     * This method runs error checks on the data inputted, creates a new Part and adds it to the observable list of parts in Inventory.
     * @param event This is the action event of clicking on the save button.
     */
    @FXML
    void onActionSavePart(ActionEvent event) throws IOException {
        exceptionErrorText.setText("");
        boolean loadMain = false;
        try {
            int id = incrementID();
            String name = txtAddPartName.getText();
            int machineID;
            String companyName="";
            try {
                Integer.parseInt(txtAddPartInv.getText());
            } catch (NumberFormatException e) {
                exceptionErrorText.setText("Inventory must be an integer\n");
            }
            try {
                Double.parseDouble(txtAddPartPrice.getText());
            } catch (NumberFormatException e) {
                exceptionErrorText.setText(exceptionErrorText.getText() + "Price must be an double\n");
            }
            try {
                Integer.parseInt(txtAddPartMax.getText());
            } catch (NumberFormatException e) {
                exceptionErrorText.setText(exceptionErrorText.getText() + "Max must be an integer\n");
            }
            try {
                Integer.parseInt(txtAddPartMin.getText());
            } catch (NumberFormatException e) {
                exceptionErrorText.setText(exceptionErrorText.getText() + "Min must be an integer\n");
            }
            if (radioAddPartInHouse.isSelected()) {
                try {
                    Integer.parseInt(txtAddPartMachine_or_CoName.getText());
                } catch (NumberFormatException e) {
                    exceptionErrorText.setText(exceptionErrorText.getText() + "Machine ID must be an integer");
                }

            }
            if (name.isEmpty()) {
                exceptionErrorText.setText("Name must have input\n" + exceptionErrorText.getText());
            } else {
                int inventory = Integer.parseInt(txtAddPartInv.getText());
                double price = Double.parseDouble(decimalFormat.format(Double.parseDouble(txtAddPartPrice.getText())));
                int max = Integer.parseInt(txtAddPartMax.getText());
                int min = Integer.parseInt(txtAddPartMin.getText());
                if (radioAddPartInHouse.isSelected()) {
                    machineID = Integer.parseInt(txtAddPartMachine_or_CoName.getText());
                    if (inventory < 0 || price < 0 || max < 0 || min < 0 || machineID < 0) {
                        exceptionErrorText.setText("Please enter non negative numbers.");
                    } else {
                        if (max <= min) {
                            exceptionErrorText.setText("Max must be bigger than min");
                        } else {
                            if (inventory > max || inventory < min) {
                                exceptionErrorText.setText("Inventory must be between max and min");
                            } else {
                                Inventory.addPart(new InHouse(id, name, price, inventory, min, max, machineID));
                                loadMain = true;
                            }
                        }
                    }
                }  else if (!radioAddPartInHouse.isSelected()){

                    companyName = txtAddPartMachine_or_CoName.getText();
                    if (companyName.isEmpty()) {
                        exceptionErrorText.setText(exceptionErrorText.getText() + "Fill in company name\n");
                    }
                    else if (inventory < 0 || price < 0 || max < 0 || min < 0) {
                        exceptionErrorText.setText("Please enter non negative numbers.");
                    } else {
                        if (max <= min) {
                            exceptionErrorText.setText("Max must be bigger than min");
                        } else {
                            if (inventory > max || inventory < min) {
                                exceptionErrorText.setText("Inventory must be between max and min");
                            } else {
                                Inventory.addPart(new Outsourced(id, name, price, inventory, min, max, companyName));
                                loadMain = true;
                            }
                        }
                    }
                }
            }
        } catch (NumberFormatException e) {
            System.out.println("error: " + e.getMessage());
        }
        if (loadMain) {
            stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            scene = FXMLLoader.load(getClass().getResource("/lag311/pa/main.fxml"));
            stage.setScene(new Scene(scene));
            stage.show();
        }
    }
}